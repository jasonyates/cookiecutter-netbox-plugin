{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#cookiecutter-netbox-plugin","title":"Cookiecutter NetBox Plugin","text":"<p>Cookiecutter template for a NetBox plugin, built with popular develop tools and conform to best practice.</p> <ul> <li>Documentation: https://github.com/netbox-community/cookiecutter-netbox-plugin</li> </ul>"},{"location":"#features","title":"Features","text":"<p>This tool will create Python project with the following features:</p> <ul> <li>Mkdocs: Writing your docs in markdown style</li> <li>Format with Black and Isort</li> <li>Lint code with Flake8 and Flake8-docstrings</li> <li>Pre-commit hooks: Formatting/linting anytime when commit your code</li> <li>Mkdocstrings: Auto API doc generation</li> <li>Continuous Integration/Deployment by GitHub actions, includes:<ul> <li>publish documents automatically when CI success</li> <li>extract changelog from CHANGELOG and integrate with release notes automatically</li> </ul> </li> <li>Host your documentation from GitHub Pages with zero-config</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher):</p> <pre><code>pip install -U cookiecutter\n</code></pre> <p>Generate a Python package project:</p> <pre><code>cookiecutter https://github.com/netbox-community/cookiecutter-netbox-plugin.git\n</code></pre> <p>Then follow Tutorial to finish other configurations.</p>"},{"location":"history/","title":"History","text":""},{"location":"history/#history","title":"History","text":""},{"location":"history/#v010","title":"v0.1.0","text":"<p>first (Beta) release with the following features:</p> <ul> <li>Mkdocs: Writing your docs in markdown style</li> <li>Format with Black and Isort</li> <li>Lint code with Flake8 and Flake8-docstrings</li> <li>Pre-commit hooks: Formatting/linting anytime when commit your code</li> <li>Mkdocstrings: Auto API doc generation</li> <li>Continuous Integration/Deployment by GitHub actions, includes:<ul> <li>publish documents automatically when CI success</li> <li>extract changelog from CHANGELOG and integrate with release notes automatically</li> </ul> </li> <li>Host your documentation from GitHub Pages with zero-config</li> </ul>"},{"location":"prompts/","title":"Prompts","text":""},{"location":"prompts/#prompts","title":"Prompts","text":"<p>When you create a package, you are prompted to enter these values.</p>"},{"location":"prompts/#templated-values","title":"Templated Values","text":"<p>The following appear in various parts of your generated project.</p>"},{"location":"prompts/#templated-values_1","title":"Templated Values","text":"<p>The following appear in various parts of your generated project.</p> plugin_name The base name of your plugin (without \"NetBox\" or \"Plugin\").  This is used to initialize most of the other settings. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The name of your Python package for PyPI, also as the repository name of GitHub. Typically, it is the slugified version of project_name. project_short_description A 1-sentence description of what your Python package does. full_name Your full name. email Your email address. github_username Your GitHub username. version The starting version number of the package."},{"location":"prompts/#options","title":"Options","text":"<p>The following package configuration options set up different features for your project.</p> open_source_license Choose a license. Options: [1. Apache-2.0, 2. MIT, 3. BSD, 4. ISC, 5. GPL-3.0-only, 6. Not open source] <p>except above settings, for CI/CD, you'll also need configure gitub repsitory secrets at page repo &gt; settings &gt; secrtes, and add the following secrets:</p> <ul> <li>PERSONAL_TOKEN (required for publishing document to git pages)</li> <li>TEST_PYPI_API_TOKEN (required for publishing dev release to testpypi)</li> <li>PYPI_API_TOKEN (required for publish )</li> </ul>"},{"location":"pypi_release_checklist/","title":"Release checklist","text":""},{"location":"pypi_release_checklist/#pypi-release-checklist","title":"PyPI Release Checklist","text":""},{"location":"pypi_release_checklist/#before-your-first-release","title":"Before Your First Release","text":"<p>You better visit PyPI to make sure your package name is unused.</p>"},{"location":"pypi_release_checklist/#for-every-release","title":"For Every Release","text":"<ol> <li> <p>Make some pull requests, merge all changes from feature branch to master/main.</p> </li> <li> <p>Update CHANGELOG.md manually. Make sure it follows the Keep a Changelog standard.     Be noticed that GitHub workflow will read changelog and extract release notes automatically.</p> </li> <li> <p>Commit the changelog changes:</p> <pre><code>git add CHANGELOG.md\ngit commit -m \"Changelog for upcoming release 0.1.1.\"\n</code></pre> </li> <li> <p>Update version number.</p> </li> <li> <p>Push these commits to master/main:</p> <pre><code>git push\n</code></pre> <p>Before proceeding to the next step, please check workflows triggered by this push have passed.</p> </li> <li> <p>Create and push the tag to master/main, creating the new release on both GitHub and PyPI:</p> <p>Only tag name started with 'v'(lower case) will leverage GitHub release workflow.</p> </li> <li> <p>Check the PyPI listing page to make sure that the README, release     notes, and roadmap display properly.</p> </li> </ol>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#tutorial","title":"Tutorial","text":"Note <p>Did you find this article confusing? Edit this file and pull a request!</p> <p>To start with, you will need GitHub, PyPI and TestPyPI. If you don't have one, please follow the links to apply one before you get started on this tutorial.</p> <p>If you are new to Git and GitHub, you should probably spend a few minutes on some tutorials at the top of the page at GitHub Help.</p>"},{"location":"tutorial/#step-1-install-cookiecutter","title":"Step 1: Install Cookiecutter","text":"<p>Install cookiecutter:</p> <pre><code>pip install cookiecutter\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-package","title":"Step 2: Generate Your Package","text":"<p>Now it's time to generate your Python package.</p> <p>Run the following command and feed with answers, If you don\u2019t know what to enter, stick with the defaults:</p> <pre><code>cookiecutter https://github.com/netbox-community/cookiecutter-netbox-plugin.git\n</code></pre> <p>Finally, a new folder will be created under current folder, the name is the answer you provided to <code>project_slug</code>.</p> <p>Go to this generated folder, the project layout should look like:</p> <pre><code>.\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 MANIFEST.in\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 changelog.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 contributing.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 netbox_healthcheck_plugin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 filtersets.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 forms.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 navigation.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tables.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 netbox_healthcheck_plugin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 healthcheck.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 urls.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views.py\n\u251c\u2500\u2500 requirements_dev.txt\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_netbox_healthcheck_plugin.py\n</code></pre> <p>Here the plugin_name is <code>HealthCheck</code>, when you generate yours, it could be other name.</p>"},{"location":"tutorial/#step-3-create-a-github-repo","title":"Step 3: Create a GitHub Repo","text":"<p>Go to your GitHub account and create a new repo named <code>netbox-healthcheck-plugin</code>, where <code>netbox-healthcheck-plugin</code> matches the <code>project_slug</code> from your answers to running cookiecutter.</p> <p>Then go to repo &gt; settings &gt; secrets, click on 'New repository secret', add the following  secrets:</p> <ul> <li>TEST_PYPI_API_TOKEN, see How to apply TestPyPI token</li> <li>PYPI_API_TOKEN, see How to apply pypi token</li> <li>PERSONAL_TOKEN, see How to apply personal token</li> </ul>"},{"location":"tutorial/#step-4-upload-code-to-github","title":"Step 4: Upload code to GitHub","text":"<p>Back to your develop environment, find the folder named after the <code>project_slug</code>. Move into this folder, and then setup git to use your GitHub repo and upload the code:</p> <pre><code>cd my-package\n\ngit add .\ngit commit -m \"Initial commit.\"\ngit branch -M main\ngit remote add origin git@github.com:myusername/my-package.git\ngit push -u origin main\n</code></pre> <p>Where <code>myusername</code> and <code>my-package</code> are adjusted for your username and repo name.</p> <p>You'll need a ssh key to push the repo. You can Generate a key or Add an existing one.</p> Warning <p>if you answered 'yes' to the question if install pre-commit hooks at last step, then you should find pre-commit be invoked when you run <code>git commit</code>, and some files  may be modified by hooks. If so, please add these files and commit again.</p>"},{"location":"tutorial/#check-result","title":"Check result","text":"<p>After pushing your code to GitHub, goto GitHub web page, navigate to your repo, then click on actions link, you should find screen like this:</p> <p></p> <p>There should be some workflows running. After they finished, go to [TestPyPI], check if a new artifact is published under the name <code>project_slug</code>.</p>"},{"location":"tutorial/#step-5-check-documentation","title":"Step 5. Check documentation","text":"<p>Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} once:</p> <ol> <li>the commit is tagged, and the tag name is started with 'v' (lower case)</li> <li>build/testing executed by GitHub CI passed</li> </ol>"},{"location":"tutorial/#step-6-make-official-release","title":"Step 6. Make official release","text":"<p>After done with your phased development in a feature branch, make a pull request, following   instructions at release checklist, trigger first official release and check   result at [PyPI].</p>"}]}